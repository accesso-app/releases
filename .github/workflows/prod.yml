name: PRODUCTION DEPLOY

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Enter git tag to deploy'
        required: true
      full_stop:
        description: 'Enter "yes" if full stop required before update'
        default: 'no'
        required: false
      rust_log:
        description: Set RUST_LOG env variable
        required: false
        default: 'INFO'

env:
  INPUT_RUST_LOG: ${{ github.event.inputs.rust_log }}

jobs:
  deploy-production:
    name: Deploy
    runs-on: [self-hosted, production]

    defaults:
      run:
        working-directory: /home/www/releases

    steps:
      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub Deployment
        id: deployment
        with:
          token: '${{ github.token }}'
          environment: production

      - uses: sergeysova/deployment-status@releases/v1.1
        name: Deployment progress
        with:
          token: '${{ github.token }}'
          state: in_progress
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Stop previous environment
        if: github.event.inputs.full_stop == 'yes'
        run: |
          docker login docker.pkg.github.com --username ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          export POSTGRES_DB="${{ secrets.PROD_DB }}"
          export POSTGRES_USER="${{ secrets.PROD_DB_USER }}"
          export POSTGRES_PASSWORD="${{ secrets.PROD_DB_PASSWORD }}"
          export SENDGRID_API_KEY="${{ secrets.PROD_SENDGRID_API_KEY }}"
          docker-compose -f docker-compose.yaml -f prod.yaml pull -q
          docker-compose -f docker-compose.yaml -f prod.yaml build
          docker-compose -f docker-compose.yaml -f prod.yaml up -d --remove-orphans

      - name: Checkout release
        run: |
          git reset --hard HEAD
          git clean -f
          git fetch -p
          git checkout ${{ github.event.inputs.version }}

      - name: Docker compose
        run: |
          docker login docker.pkg.github.com --username ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          export POSTGRES_DB="${{ secrets.PROD_DB }}"
          export POSTGRES_USER="${{ secrets.PROD_DB_USER }}"
          export POSTGRES_PASSWORD="${{ secrets.PROD_DB_PASSWORD }}"
          export SENDGRID_API_KEY="${{ secrets.PROD_SENDGRID_API_KEY }}"
          docker-compose -f docker-compose.yaml -f prod.yaml pull -q
          docker-compose -f docker-compose.yaml -f prod.yaml build
          docker-compose -f docker-compose.yaml -f prod.yaml up -d --remove-orphans

      - uses: sergeysova/deployment-status@releases/v1.1
        name: Deployment success
        if: success()
        with:
          token: '${{ github.token }}'
          environment_url: https://accesso.app
          state: success
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - uses: sergeysova/deployment-status@releases/v1.1
        name: Deployment failure
        if: failure()
        with:
          token: '${{ github.token }}'
          state: failure
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
